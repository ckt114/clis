#!/usr/bin/env bash
# This script was generated by bashly 1.2.7 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script
# :command.root_command
root_command() {
  # src/root_command.sh
  [[ ${args[--debug]} -gt 0 ]] && inspect_args

  setup

  cat >$config <<EOF
serverAddr: ${serverAddr}
serverPort: ${serverPort}
auth:
  method: token
  token: "{{ .Envs.FRP_TOKEN }}"
webServer:
  addr: ${webAddr}
  port: ${webPort}

proxies:
- name: ${name}
  type: https
  customDomains: [ $(printf "%s, " "${customDomains[@]}") ]
  plugin:
    type: https2http
    localAddr: ${localAddr}:${port}
    crtPath: ${sslCert}
    keyPath: ${sslKey}
    hostHeaderRewrite: ${localAddr}
    requestHeaders:
      set:
        x-from-where: frp
EOF

  connect https

}

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
tunnel_usage() {
  printf "tunnel - Create a reverse proxy tunnel using frpc.\n\n"

  printf "%s\n" "Usage:"
  printf "  tunnel PORT [OPTIONS]\n"
  printf "  tunnel --help | -h\n"
  printf "  tunnel --version | -v\n"
  echo

  # :command.long_usage
  if [[ -n "$long_usage" ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--name, -n NAME (repeatable)"
    printf "    Name to use for proxy url\n"
    echo

    # :flag.usage
    printf "  %s\n" "--auth-token, -t AUTH-TOKEN"
    printf "    Token to authenticate with server\n"
    echo

    # :flag.usage
    printf "  %s\n" "--server-addr, -s SERVER-ADDR"
    printf "    Server address to connect\n"
    echo

    # :flag.usage
    printf "  %s\n" "--server-port, -p SERVER-ADDR"
    printf "    Server address to connect\n"
    echo

    # :flag.usage
    printf "  %s\n" "--domain, -d DOMAIN"
    printf "    Domain to use for local proxy\n"
    echo

    # :flag.usage
    printf "  %s\n" "--ssl-cert, -c SSL-CERT"
    printf "    Certificate to use to proxy local port\n"
    echo

    # :flag.usage
    printf "  %s\n" "--ssl-key, -k SSL-KEY"
    printf "    Key to use to proxy local port\n"
    echo

    # :flag.usage
    printf "  %s\n" "--web, -W"
    printf "    Enable local web server\n"
    echo

    # :flag.usage
    printf "  %s\n" "--web-addr, -S WEB-ADDR"
    printf "    Local web server address\n"
    printf "    %s\n" "Default: 127.0.0.1"
    echo

    # :flag.usage
    printf "  %s\n" "--web-port, -P WEB-PORT"
    printf "    Local web server address\n"
    echo

    # :flag.usage
    printf "  %s\n" "--local-addr, -l LOCAL-ADDR"
    printf "    Local address to proxy to\n"
    printf "    %s\n" "Default: 127.0.0.1"
    echo

    # :flag.usage
    printf "  %s\n" "--debug"
    printf "    Display runtime info\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_args
    printf "%s\n" "Arguments:"

    # :argument.usage
    printf "  %s\n" "PORT"
    printf "    Local port to proxy to\n"
    echo

    # :command.usage_environment_variables
    printf "%s\n" "Environment Variables:"

    # :environment_variable.usage
    printf "  %s\n" "TUNNEL_AUTH_TOKEN"
    printf "\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "TUNNEL_SERVER_ADDR"
    printf "\n"
    printf "    %s\n" "Default: frps.example.com"
    echo

    # :environment_variable.usage
    printf "  %s\n" "TUNNEL_SERVER_PORT"
    printf "\n"
    printf "    %s\n" "Default: 7000"
    echo

    # :environment_variable.usage
    printf "  %s\n" "TUNNEL_DOMAIN"
    printf "\n"
    printf "    %s\n" "Default: example.com"
    echo

    # :environment_variable.usage
    printf "  %s\n" "TUNNEL_SSL_CERT"
    printf "\n"
    printf "    %s\n" "Default: site.crt"
    echo

    # :environment_variable.usage
    printf "  %s\n" "TUNNEL_SSL_KEY"
    printf "\n"
    printf "    %s\n" "Default: site.key"
    echo

    # :command.usage_examples
    printf "%s\n" "Examples:"
    printf "  tunnel 8080\n"
    printf "  tunnel 8080 nginx --name nginx\n"
    printf "  tunnel 8080 nginx -s frps.mydomain.com -p 8000\n"
    printf "  tunnel 8080 nginx -c site.crt -k site.key\n"
    echo

  fi
}

# :command.normalize_input
# :command.normalize_input_function
normalize_input() {
  local arg passthru flags
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ "$arg" == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.user_lib
# src/lib/connect.sh
function connect() {
  echo
  for d in "${customDomains[@]}"; do
    echo "Visit ${1}://${d} to see your application."
  done
  echo

  # Cleanup old configs
  find -H $workdir -name "frpc_*" -mmin +1 -exec rm {} \;

  \frpc -c $config
}

# src/lib/setup.sh
function setup() {
  port=${args[port]}

  authToken=${args[--auth-token]:-$TUNNEL_AUTH_TOKEN}
  serverAddr=${args[--server-addr]:-$TUNNEL_SERVER_ADDR}
  serverPort=${args[--server-port]:-$TUNNEL_SERVER_PORT}
  domain=${args[--domain]:-$TUNNEL_DOMAIN}
  sslCert=${args[--ssl-cert]:-$TUNNEL_SSL_CERT}
  sslKey=${args[--ssl-key]:-$TUNNEL_SSL_KEY}
  localAddr=${args[--local-addr]}

  webAddr=${args[--web-addr]}

  # Use --web-port if set, otherwise use 7400 if only --web is set
  webPort=${args[--web-port]}
  [[ -z "$webPort" && ${args[--web]} ]] && webPort=7400

  # Create an array of names from multi-value --name flag
  # If --name is not set, then create a random 6-digit name
  names=(${args[--name]})
  if [[ "${#names[@]}" -eq 0 ]]; then
    names=($(cat /dev/urandom | LC_ALL=C tr -dc 'a-z0-9' | fold -w 6 | head -n 1))
  fi

  name=${names[0]}

  # Create an array of FQDNs from --name and --domain flags
  customDomains=()
  for n in "${names[@]}"; do
    customDomains+=("${n}.${domain}")
  done

  export FRP_TOKEN=$authToken

  workdir=/tmp

  config="${workdir}/frpc_$(date +%s).yaml"
}

# src/lib/validations/validate_dir_exists.sh
validate_dir_exists() {
  [[ -d "$1" ]] || echo "must be an existing directory"
}

# src/lib/validations/validate_file_exists.sh
validate_file_exists() {
  [[ -f "$1" ]] || echo "must be an existing file"
}

# src/lib/validations/validate_integer.sh
validate_integer() {
  [[ "$1" =~ ^[0-9]+$ ]] || echo "must be an integer"
}

# src/lib/validations/validate_not_empty.sh
validate_not_empty() {
  [[ -z "$1" ]] && echo "must not be empty"
}

# :command.command_functions

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        tunnel_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.environment_variables_filter
  # :command.environment_variables_default
  export TUNNEL_SERVER_ADDR="${TUNNEL_SERVER_ADDR:-frps.example.com}"
  export TUNNEL_SERVER_PORT="${TUNNEL_SERVER_PORT:-7000}"
  export TUNNEL_DOMAIN="${TUNNEL_DOMAIN:-example.com}"
  export TUNNEL_SSL_CERT="${TUNNEL_SSL_CERT:-site.crt}"
  export TUNNEL_SSL_KEY="${TUNNEL_SSL_KEY:-site.key}"

  env_var_names+=("TUNNEL_AUTH_TOKEN")
  env_var_names+=("TUNNEL_SERVER_ADDR")
  env_var_names+=("TUNNEL_SERVER_PORT")
  env_var_names+=("TUNNEL_DOMAIN")
  env_var_names+=("TUNNEL_SSL_CERT")
  env_var_names+=("TUNNEL_SSL_KEY")

  # :command.dependencies_filter
  missing_deps=
  # :dependency.filter
  if ! command -v frpc >/dev/null 2>&1; then
    printf "missing dependency: frpc\n" >&2
    printf "%s\n\n" "install from https://github.com/fatedier/frp" >&2
    missing_deps=1
  else
    deps['frpc']="$(command -v frpc | head -n1)"
  fi

  if [[ -n $missing_deps ]]; then
    exit 1
  fi

  # :command.command_filter
  action="root"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --name | -n)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          escaped="$(printf '%q' "$2")"
          if [[ -z ${args['--name']+x} ]]; then
            args['--name']="$escaped"
          else
            args['--name']="${args['--name']} $escaped"
          fi
          shift
          shift
        else
          printf "%s\n" "--name requires an argument: --name, -n NAME" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --auth-token | -t)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--auth-token']="$2"
          shift
          shift
        else
          printf "%s\n" "--auth-token requires an argument: --auth-token, -t AUTH-TOKEN" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --server-addr | -s)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--server-addr']="$2"
          shift
          shift
        else
          printf "%s\n" "--server-addr requires an argument: --server-addr, -s SERVER-ADDR" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --server-port | -p)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--server-port']="$2"
          shift
          shift
        else
          printf "%s\n" "--server-port requires an argument: --server-port, -p SERVER-ADDR" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --domain | -d)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--domain']="$2"
          shift
          shift
        else
          printf "%s\n" "--domain requires an argument: --domain, -d DOMAIN" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --ssl-cert | -c)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--ssl-cert']="$2"
          shift
          shift
        else
          printf "%s\n" "--ssl-cert requires an argument: --ssl-cert, -c SSL-CERT" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --ssl-key | -k)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--ssl-key']="$2"
          shift
          shift
        else
          printf "%s\n" "--ssl-key requires an argument: --ssl-key, -k SSL-KEY" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --web | -W)

        # :flag.case_no_arg
        args['--web']=1
        shift
        ;;

      # :flag.case
      --web-addr | -S)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--web-addr']="$2"
          shift
          shift
        else
          printf "%s\n" "--web-addr requires an argument: --web-addr, -S WEB-ADDR" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --web-port | -P)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--web-port']="$2"
          shift
          shift
        else
          printf "%s\n" "--web-port requires an argument: --web-port, -P WEB-PORT" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --local-addr | -l)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--local-addr']="$2"
          shift
          shift
        else
          printf "%s\n" "--local-addr requires an argument: --local-addr, -l LOCAL-ADDR" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --debug)

        # :flag.case_no_arg
        args['--debug']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        # :argument.case
        if [[ -z ${args['port']+x} ]]; then
          args['port']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  # :command.required_args_filter
  if [[ -z ${args['port']+x} ]]; then
    printf "missing required argument: PORT\nusage: tunnel PORT [OPTIONS]\n" >&2

    exit 1
  fi

  # :command.default_assignments
  [[ -n ${args['--web-addr']:-} ]] || args['--web-addr']="127.0.0.1"
  [[ -n ${args['--local-addr']:-} ]] || args['--local-addr']="127.0.0.1"

  # :command.validations
  # :argument.validations
  if [[ -v args['port'] && -n $(validate_integer "${args['port']:-}") ]]; then
    printf "validation error in %s:\n%s\n" "PORT" "$(validate_integer "${args['port']:-}")" >&2
    exit 1
  fi

  # :flag.validations
  if [[ -v args['--server-port'] && -n $(validate_integer "${args['--server-port']:-}") ]]; then
    printf "validation error in %s:\n%s\n" "--server-port, -p SERVER-ADDR" "$(validate_integer "${args['--server-port']:-}")" >&2
    exit 1
  fi

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # :command.environment_variables_default
  export TUNNEL_SERVER_ADDR="${TUNNEL_SERVER_ADDR:-frps.example.com}"
  export TUNNEL_SERVER_PORT="${TUNNEL_SERVER_PORT:-7000}"
  export TUNNEL_DOMAIN="${TUNNEL_DOMAIN:-example.com}"
  export TUNNEL_SSL_CERT="${TUNNEL_SSL_CERT:-site.crt}"
  export TUNNEL_SSL_KEY="${TUNNEL_SSL_KEY:-site.key}"

  # :command.globals
  declare -g -A args=()
  declare -g -A deps=()
  declare -g -a env_var_names=()
  declare -g -a input=()

}

# :command.run
run() {
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "root") root_command ;;
  esac
}

initialize
run "$@"
